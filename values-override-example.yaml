---
image:
  # There's a common location for this, but I build it with CI so I always know and trust the version
  repository: registry.cloudcauldron.io:5050/cloudcauldron/mastodon
  tag: latest
  pullPolicy: Always

mastodon:
  # create an initial administrator user; the password is autogenerated and will
  # have to be reset
  createAdmin:
    enabled: true
    username: bocan
    email: chris@cloudcauldron.io

  # available locales: https://github.com/mastodon/mastodon/blob/main/config/application.rb#L71
  local_domain: mastodon.cloudcauldron.io

  # Use of WEB_DOMAIN requires careful consideration: https://docs.joinmastodon.org/admin/config/#federation
  # You must redirect the path LOCAL_DOMAIN/.well-known/ to WEB_DOMAIN/.well-known/ as described
  # web_domain: mastodon.example.com

  s3:
    enabled: true
    access_key: "GOOG123456789012345678901234567890123456789012345678901234567"
    access_secret: "abceefghijklmnopqrstuvwxyzabcdefghijklmn"
    # you can also specify the name of an existing Secret
    # with keys AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY
    existingSecret: ""
    bucket: "cloudcauldron-mastodon"
    endpoint: https://storage.googleapis.com
    hostname: storage.googleapis.com
    region: "eu-west2"
    # If you have a caching proxy, enter its base URL here.
    alias_host: ""

  # these must be set manually; autogenerated keys are rotated on each upgrade
  secrets:
    secret_key_base: "12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789011234567"
    otp_secret: "12345678901234567890123456789123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789"
    vapid:
      private_key: "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopq="
      public_key: "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghi="
    # you can also specify the name of an existing Secret
    # with keys SECRET_KEY_BASE and OTP_SECRET and
    # VAPID_PRIVATE_KEY and VAPID_PUBLIC_KEY
    existingSecret: ""

  smtp:
    domain: cloudcauldron.io
    enable_starttls: auto
    from_address: mastodon@cloudcauldron.io
    login: xxxxxxxxxx@cloudcauldron.io
    openssl_verify_mode: peer
    password: 12345678901234567890123456789012345678901234567889
    port: 587
    tls: false
    server: smtp.eu.mailgun.org
    existingSecret:

  web:
    port: 3000
    # -- Number of Web Pods running
    replicas: 2

  sidekiq:
    workers:
    - name: scheduler
      # -- Number of threads / parallel sidekiq jobs that are executed per Pod
      concurrency: 25
      # -- Number of Pod replicas deployed by the Deployment
      replicas: 1
      # -- Sidekiq queues for Mastodon that are handled by this worker. See https://docs.joinmastodon.org/admin/scaling/#concurrency
      # See https://github.com/mperham/sidekiq/wiki/Advanced-Options#queues for how to weight queues as argument
      queues:
        - scheduler # Make sure the scheduler queue only exists once and with a worker that has 1 replica.
    - name: all-queues
      concurrency: 50
      resources: {}
      replicas: 2
      queues:
        - push
        - pull
        - mailers
        - default
        - ingress

ingress:
  enabled: true
  ingressClassName: nginx
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.org/client-max-body-size: 50m
  hosts:
    - host: mastodon.cloudcauldron.io
      paths:
        - path: '/'
  tls:
    - secretName: mastodon-tls
      hosts:
        - mastodon.cloudcauldron.io

elasticsearch:
  enabled: true
  # Build this over-engineered thing in the cloud once the CHART supports it being outside Kubernetes

# Using Cloud SQL now.
postgresql:
  # disable if you want to use an existing db; in which case the values below
  # must match those of that external postgres instance
  enabled: false
  postgresqlHostname: 10.16.240.5
  auth:
    database: mastodon_production
    username: postgres
    # you must set a password; the password generated by the postgresql chart will
    # be rotated on each upgrade:
    # https://github.com/bitnami/charts/tree/master/bitnami/postgresql#upgrade
    password: "a1b2c3d4e5"
    postgresPassword: "a1b2c3d4e5"
    # you can also specify the name of an existing Secret
    # with a key of postgres-password set to the password you want
    existingSecret: ""

# https://github.com/bitnami/charts/tree/master/bitnami/redis#parameters
# The Terraform doesn't build this yet because, like elasticsearch, the chart
# doesn't support using an external one yet.
redis:
  # you must set a password; the password generated by the redis chart will be
  # rotated on each upgrade:
  password: "abcde"
  # you can also specify the name of an existing Secret
  # with a key of redis-password set to the password you want

resources:
  limits:
    memory: 2048Mi
  requests:
    cpu: 250m
    memory: 1024Mi

autoscaling:
  enabled: true
  minReplicas: 2

affinity:
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 1
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: node_pool
            operator: In
            values:
            - default-node-pool
        topologyKey: "kubernetes.io/hostname"
